<h2>Welcome <%= username %></h2>
<style type="text/css">
    #flexContainer { display: flex; }
    #messagesContainer { flex-flow: row wrap; min-width: 200px; }
    #messagesContainer div {  }
    #usersWrapper { flex-flow: row wrap; }
    img.photo { width: 40px; vertical-align: top}
</style>
<div id="newMessageForm">
    <textarea id="message" placeholder="Enter your message here:"></textarea>
    <button id="postMessageButton">Add Message</button>
</div>
<div id="flexContainer">
    <div id="messagesContainer"></div>
    <div id="usersWrapper">
        <h4>Users</h4>
        <div id="usersContainer"></div>
    </div>
</div>
<script>
    var MessageModel = Backbone.Model.extend({
        urlRoot: '/messages'
    });

    var CurrrentUserModel = Backbone.Model.extend({
        urlRoot: '/currentUsers'
    });

    var SailsCollection = Backbone.Collection.extend({
        sailsCollection: "",
        socket: null,
        sync: function(method, model, options){
            var where = {};
            if (options.where) {
                where = {
                    where: options.where
                }
            }
            if(typeof this.sailsCollection === "string" && this.sailsCollection !== "") {
                this.socket = io.connect();
                this.socket.on("connect", _.bind(function(){
                    this.socket.request("/" + this.sailsCollection, where, _.bind(function(objs){
                        this.set(objs);
                    }, this));

                    this.socket.on("message", _.bind(function(msg){
                        if (msg.model == this.sailsCollection.toLowerCase()) {
                            var m = msg.verb;
                            if (m === "create") {
                                this.add(msg.data);
                            } else if (m === "update") {
                                this.get(msg.id).set(msg.data);
                            } else if (m === "destroy") {
                                this.remove(this.get(msg.id));
                            }
                        }
                    }, this));
                }, this));
            } else {
                console.log("Error: Cannot retrieve models because property 'sailsCollection' not set on the collection");
            }
        }
    });

    var MessageCollection = SailsCollection.extend({
        sailsCollection: 'messages',
        model: MessageModel
    });

    var CurrentUserCollection = SailsCollection.extend({
        sailsCollection: 'currentUsers',
        model: CurrrentUserModel
    });

    var users = new CurrentUserCollection();
    users.fetch();

    var messages = new MessageCollection();
    messages.fetch();

    $("#postMessageButton").click(function(){
        var messageText = $("#message").val();
        messages.create({message: messageText}, {wait: true});
        $("#message").val("");
    });

    _.templateSettings = {
        interpolate : /\{\{(.+?)\}\}/g
    };

    var MessagesView = Backbone.View.extend({
        el: '#messagesContainer',
        initialize: function () {
            this.collection.on('add', this.render, this);
            this.render();
        },
        template: _.template("<div><p><b>{{ username }}: </b>{{ message }}</p></div>"),
        render: function () {
                this.$el.html("");
                this.collection.each(function(msg){
                    this.$el.append(this.template(msg.toJSON()));
                }, this)
        }
    });

    var mView = new MessagesView({collection: messages});

    var UsersView = Backbone.View.extend({
        el: '#usersContainer',
        initialize: function () {
            this.collection.on('add', this.render, this);
            this.collection.on('remove', this.render, this);
            this.render();
        },
        template: _.template("<div><img class=\"photo\" src=\"{{ photoUrl || '/images/nophoto.png' }}\" /><b>{{ username }} </b></div>"),
        render: function () {
            this.$el.html("");
            this.collection.each(function(user){
                this.$el.append(this.template(user.toJSON()));
            }, this)
        }
    });

    var uView = new UsersView({collection: users});
</script>